// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Safely get environment variables, handling potential undefined/null string values
const getValidEnvVar = (value: string | undefined, fallback: string): string => {
  if (!value || value === 'undefined' || value === 'null' || value.trim() === '') {
    return fallback;
  }
  return value.trim();
};

const SUPABASE_URL = getValidEnvVar(
  import.meta.env.VITE_SUPABASE_URL, 
  "https://xdinmyztzvrcasvgupir.supabase.co"
);

const SUPABASE_PUBLISHABLE_KEY = getValidEnvVar(
  import.meta.env.VITE_SUPABASE_ANON_KEY,
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhkaW5teXp0enZyY2Fzdmd1cGlyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI2NzgyMjksImV4cCI6MjA2ODI1NDIyOX0.nUYgDJHoZNX5P4ZYKeeY0_AeIV8ZGpCaYjHMyScxwCQ"
);

// Log the actual values for debugging (only the first few characters of the key)
console.log('Supabase URL:', SUPABASE_URL);
console.log('Supabase Key (preview):', SUPABASE_PUBLISHABLE_KEY.substring(0, 20) + '...');

// Validate URL format
if (!SUPABASE_URL.startsWith('https://') || !SUPABASE_URL.includes('.supabase.co')) {
  console.error('Invalid Supabase URL format:', SUPABASE_URL);
}

// Validate key format (should be a JWT)
if (!SUPABASE_PUBLISHABLE_KEY.startsWith('eyJ')) {
  console.error('Invalid Supabase key format - not a JWT:', SUPABASE_PUBLISHABLE_KEY.substring(0, 20));
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Completely disable URL session detection
    flowType: 'implicit' // Change from pkce to implicit to avoid URL parsing
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  },
  db: {
    schema: 'public'
  }
});